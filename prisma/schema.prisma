datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// NextAuth required models
model User {
  id            String       @id @default(uuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // App-specific relations
  debates       Debate[]     @relation("UserDebates")
  joinedDebates Debate[]     @relation("Participants")
  arguments     Argument[]   @relation("UserArguments")
  votes         Vote[]       @relation("UserVotes")
  sideChoices   SideChoice[] @relation("UserSideChoices")
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// App-specific models
model Debate {
  id             String       @id @default(uuid())
  title          String
  description    String
  tags           String[]
  category       String
  image          String?
  duration       Int
  createdAt      DateTime     @default(now())
  endsAt         DateTime
  creator        User         @relation("UserDebates", fields: [creatorId], references: [id])
  creatorId      String
  participants   User[]       @relation("Participants")
  arguments      Argument[]
  sideChoices    SideChoice[]
}

model Argument {
  id        String   @id @default(uuid())
  content   String
  side      String
  debate    Debate   @relation(fields: [debateId], references: [id])
  debateId  String
  author    User     @relation("UserArguments", fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  votes     Vote[]
}

model SideChoice {
  id       String @id @default(uuid())
  user     User   @relation("UserSideChoices", fields: [userId], references: [id])
  userId   String
  debate   Debate @relation(fields: [debateId], references: [id])
  debateId String
  side     String
}

model Vote {
  id         String   @id @default(uuid())
  user       User     @relation("UserVotes", fields: [userId], references: [id])
  userId     String
  argument   Argument @relation(fields: [argumentId], references: [id])
  argumentId String
}